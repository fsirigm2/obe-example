{"version":3,"file":"isInViewPortIntersectionObserver.js","sourceRoot":"","sources":["isInViewPortIntersectionObserver.ts"],"names":[],"mappings":"AAOA,IAAM,+BAA+B,GAAG,UAAC,EAKxB;QAJf,MAAM,YAAA,EACN,eAAwD,EAAxD,OAAO,mBAAG,EAAE,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,EAAE,KAAA,EACxD,QAAQ,cAAA,EACR,yBAAyB,EAAzB,iBAAiB,mBAAG,KAAK,KAAA;IAEzB,IAAM,YAAY,GAAiC,UACjD,OAAoC,EACpC,QAA8B;QAE9B,OAAO,CAAC,GAAG,CAAC,UAAC,KAAgC;YAC3C,IAAI,KAAK,CAAC,cAAc,EAAE,CAAC;gBACzB,EAAE;gBACF,QAAQ,EAAE,CAAC;gBACX,mDAAmD;gBACnD,IAAI,iBAAiB,EAAE,CAAC;oBACtB,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBACnC,CAAC;YACH,CAAC;YACD,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,4BAA4B;IAC5B,IAAI,OAAO,MAAM,CAAC,oBAAoB,KAAK,WAAW,EAAE,CAAC;QACvD,OAAO,CAAC,KAAK,CACX,0EAA0E,CAC3E,CAAC;QACF,OAAO;IACT,CAAC;IAED,IAAM,QAAQ,GAAG,IAAI,oBAAoB,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;IACjE,MAAM,IAAI,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;AACrC,CAAC,CAAC;AAEF,eAAe,+BAA+B,CAAC","sourcesContent":["export interface InviewPortType {\n  callback: () => void;\n  target: HTMLElement | null;\n  options: IntersectionObserverInit | undefined;\n  freezeOnceVisible: boolean;\n}\n\nconst checkInViewIntersectionObserver = ({\n  target,\n  options = { root: null, rootMargin: `0%`, threshold: 0 },\n  callback,\n  freezeOnceVisible = false,\n}: InviewPortType) => {\n  const _funCallback: IntersectionObserverCallback = (\n    entries: IntersectionObserverEntry[],\n    observer: IntersectionObserver\n  ) => {\n    entries.map((entry: IntersectionObserverEntry) => {\n      if (entry.isIntersecting) {\n        //\n        callback();\n        //  ---- IF TRUE WE WILL UNOBSERVER AND FALSE IS NO\n        if (freezeOnceVisible) {\n          observer.unobserve(entry.target);\n        }\n      }\n      return true;\n    });\n  };\n\n  // _checkBrowserSupport-----\n  if (typeof window.IntersectionObserver === \"undefined\") {\n    console.error(\n      \"window.IntersectionObserver === undefined! => Your Browser is Notsupport\"\n    );\n    return;\n  }\n\n  const observer = new IntersectionObserver(_funCallback, options);\n  target && observer.observe(target);\n};\n\nexport default checkInViewIntersectionObserver;\n"]}