{"version":3,"file":"ColorThemeContext.jsx","sourceRoot":"","sources":["../../../context/ColorThemeContext.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAE,aAAa,EAAE,UAAU,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAE9E,MAAM,CAAN,IAAY,WAQX;AARD,WAAY,WAAW;IACrB,gEAAiD,CAAA;IACjD,qDAAsC,CAAA;IACtC,8CAA+B,CAAA;IAC/B,gDAAiC,CAAA;IACjC,gDAAiC,CAAA;IACjC,2DAA4C,CAAA;IAC5C,iEAAkD,CAAA;AACpD,CAAC,EARW,WAAW,KAAX,WAAW,QAQtB;AAED,IAAM,iBAAiB,GAAG,aAAa,CAG7B,IAAI,CAAC,CAAC;AAEhB,IAAM,QAAQ,GAAG;IACf,IAAM,OAAO,GAAG,UAAU,CAAC,iBAAiB,CAAC,CAAC;IAC9C,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;IAClE,CAAC;IACD,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AAEF,IAAM,kBAAkB,GAAG,UAAC,EAA2C;QAAzC,QAAQ,cAAA;IAC9B,IAAA,KAAoC,QAAQ,CAChD,WAAW,CAAC,oBAAoB,CACjC,EAFM,aAAa,QAAA,EAAE,gBAAgB,QAErC,CAAC;IAEF,SAAS,CAAC;QACR,IAAM,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QAC7C,IAAI,CAAC,KAAK;YAAE,OAAO;QAEnB,oEAAoE;QACpE,aAAa,IAAI,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QACpD,OAAO;YACL,oEAAoE;YACpE,aAAa,IAAI,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QACzD,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC;IAEpB,IAAM,WAAW,GAAG,UAAC,KAAkB;QACrC,gBAAgB,CAAC,KAAK,CAAC,CAAC;IAC1B,CAAC,CAAC;IAEF,OAAO,CACL,CAAC,iBAAiB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,aAAa,eAAA,EAAE,WAAW,aAAA,EAAE,CAAC,CAChE;MAAA,CAAC,QAAQ,CACX;IAAA,EAAE,iBAAiB,CAAC,QAAQ,CAAC,CAC9B,CAAC;AACJ,CAAC,CAAC;AAEF,OAAO,EAAE,kBAAkB,EAAE,QAAQ,EAAE,CAAC","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\n\nexport enum CustomTheme {\n  LIGHT_BLUE_COOL_GREY = \"theme-lightBlue-coolGrey\",\n  PINK_COOL_GREY = \"theme-pink-coolGrey\",\n  GREEN_GREY = \"theme-green-grey\",\n  YELLOW_GREY = \"theme-yellow-grey\",\n  ORANGE_GREY = \"theme-orange-grey\",\n  FUCHSIA_BLUE_GREY = \"theme-fuchsia-blueGrey\",\n  GREEN_ELECTRIC_GREEN = \"theme-green-electricGreen\",\n}\n\nconst ColorThemeContext = createContext<{\n  selectedTheme: CustomTheme;\n  changeTheme: (theme: CustomTheme) => void;\n} | null>(null);\n\nconst useTheme = () => {\n  const context = useContext(ColorThemeContext);\n  if (!context) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n};\n\nconst ColorThemeProvider = ({ children }: { children: React.ReactNode }) => {\n  const [selectedTheme, setSelectedTheme] = useState<CustomTheme>(\n    CustomTheme.GREEN_ELECTRIC_GREEN\n  );\n\n  useEffect(() => {\n    const $body = document.querySelector(\"body\");\n    if (!$body) return;\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n    selectedTheme && $body.classList.add(selectedTheme);\n    return () => {\n      // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n      selectedTheme && $body.classList.remove(selectedTheme);\n    };\n  }, [selectedTheme]);\n\n  const changeTheme = (theme: CustomTheme) => {\n    setSelectedTheme(theme);\n  };\n\n  return (\n    <ColorThemeContext.Provider value={{ selectedTheme, changeTheme }}>\n      {children}\n    </ColorThemeContext.Provider>\n  );\n};\n\nexport { ColorThemeProvider, useTheme };\n"]}