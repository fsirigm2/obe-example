{"version":3,"file":"ncNanoId.js","sourceRoot":"","sources":["../../../utils/ncNanoId.ts"],"names":[],"mappings":"AAAA,mCAAmC;AACnC,IAAM,SAAS,GAA2B,EAAE,CAAC;AAE7C;;;;;;;;;;;;;;;GAeG;AACH,SAAS,QAAQ,CAAC,MAAoB;IAApB,uBAAA,EAAA,oBAAoB;IACpC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC;QACvB,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IACxB,CAAC;IAED,IAAM,EAAE,GAAG,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;IAC/B,IAAI,MAAM,KAAK,UAAU,EAAE,CAAC;QAC1B,OAAO,UAAG,EAAE,CAAE,CAAC;IACjB,CAAC;IAED,OAAO,UAAG,MAAM,SAAG,EAAE,CAAE,CAAC;AAC1B,CAAC;AAED,eAAe,QAAQ,CAAC","sourcesContent":["/** Used to generate unique IDs. */\nconst idCounter: Record<string, number> = {};\n\n/**\n * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n *\n * @since 0.1.0\n * @category Util\n * @param {string} [prefix=''] The value to prefix the ID with.\n * @returns {string} Returns the unique ID.\n * @see random\n * @example\n *\n * ncNanoId('contact_')\n * // => 'contact_104'\n *\n * ncNanoId()\n * // => '105'\n */\nfunction ncNanoId(prefix = \"ncNanoId_\") {\n  if (!idCounter[prefix]) {\n    idCounter[prefix] = 0;\n  }\n\n  const id = ++idCounter[prefix];\n  if (prefix === \"$lodash$\") {\n    return `${id}`;\n  }\n\n  return `${prefix}${id}`;\n}\n\nexport default ncNanoId;\n"]}