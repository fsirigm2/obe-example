{"version":3,"file":"useOutsideAlerter.js","sourceRoot":"","sources":["useOutsideAlerter.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb,OAAO,aAAa,CAAC;AAErB,OAAO,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAElC;;GAEG;AACH,SAAS,iBAAiB,CACxB,GAAoC,EACpC,0BAAsC;IAEtC,SAAS,CAAC;QACR;;WAEG;QACH,SAAS,kBAAkB,CAAC,KAAiB;YAC3C,IAAI,GAAG,CAAC,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAc,CAAC,EAAE,CAAC;gBAC/D,0BAA0B,EAAE,CAAC;YAC/B,CAAC;QACH,CAAC;QACD,0BAA0B;QAC1B,QAAQ,CAAC,gBAAgB,CAAC,WAAW,EAAE,kBAAkB,CAAC,CAAC;QAC3D,OAAO;YACL,wCAAwC;YACxC,QAAQ,CAAC,mBAAmB,CAAC,WAAW,EAAE,kBAAkB,CAAC,CAAC;QAChE,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,kDAAkD;AAC/D,CAAC;AAED,eAAe,iBAAiB,CAAC","sourcesContent":["\"use client\";\nimport \"client-only\";\n\nimport { useEffect } from \"react\";\n\n/**\n * Hook that alerts clicks outside of the passed ref\n */\nfunction useOutsideAlerter(\n  ref: React.RefObject<HTMLDivElement>,\n  handleClickOutsideCallback: () => void\n) {\n  useEffect(() => {\n    /**\n     * Alert if clicked on outside of element\n     */\n    function handleClickOutside(event: MouseEvent) {\n      if (ref.current && !ref.current.contains(event.target as Node)) {\n        handleClickOutsideCallback();\n      }\n    }\n    // Bind the event listener\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      // Unbind the event listener on clean up\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [ref]); // eslint-disable-line react-hooks/exhaustive-deps\n}\n\nexport default useOutsideAlerter;\n"]}